AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
  ALBListener:
    Type: String
    Description: ALB Listener ARN?
  ECSCluster:
    Type: String
    Description: ECS Cluster's ARN to which this will be joining
  ApplicationName:
    Type: String
    Description: Application name
  BaseServicePath:
    Type: String
    Description: Listener rule pattern path
  ListenerRulePriority:
    Type: Number
    Description: Listener rule priority  
  DockerImage:
    Type: String
    Description: Reference to the ECR Docker image including the tag 
  ContainerPort:
    Type: Number
    Description: Container port to expose for the ECS Service and Task

Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress', 'logs:CreateLogStream','logs:PutLogEvents']
            Resource: '*'

  EcsAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'

  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsAlbSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsAlbSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsAlbSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'EcsAlbSecurityGroup'

  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Join ['', [ !Ref 'BaseServicePath', '/health-check' ] ]
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join [ '-', [ !Ref 'ApplicationName', 'target-group' ] ]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [ !Join ['', [ !Ref 'BaseServicePath', '/*' ] ] ]
      ListenerArn: !Ref 'ALBListener'
      Priority: !Ref 'ListenerRulePriority'

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 30

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ApplicationName'
      ContainerDefinitions:
      - Name: !Ref 'ApplicationName'
        Cpu: 50
        Essential: 'true'
        Image: !Ref DockerImage
        Memory: 100
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !Ref 'ApplicationName'
        PortMappings:
        - ContainerPort: !Ref ContainerPort
        Environment:
        - Name: NODE_ENV
          Value: dev

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: '1'
      LoadBalancers:
      - ContainerName: !Ref 'ApplicationName'
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'taskdefinition'


Outputs:
  ECSService:
    Value: !Ref 'ECSService'

  taskdef:
    Value: !Ref 'taskdefinition'